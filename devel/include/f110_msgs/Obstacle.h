// Generated by gencpp from file f110_msgs/Obstacle.msg
// DO NOT EDIT!


#ifndef F110_MSGS_MESSAGE_OBSTACLE_H
#define F110_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace f110_msgs
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : id(0)
    , s_start(0.0)
    , s_end(0.0)
    , d_right(0.0)
    , d_left(0.0)
    , is_actually_a_gap(false)
    , s_center(0.0)
    , d_center(0.0)
    , size(0.0)
    , vs(0.0)
    , vd(0.0)
    , s_var(0.0)
    , d_var(0.0)
    , vs_var(0.0)
    , vd_var(0.0)
    , is_static(false)
    , is_visible(false)  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , s_start(0.0)
    , s_end(0.0)
    , d_right(0.0)
    , d_left(0.0)
    , is_actually_a_gap(false)
    , s_center(0.0)
    , d_center(0.0)
    , size(0.0)
    , vs(0.0)
    , vd(0.0)
    , s_var(0.0)
    , d_var(0.0)
    , vs_var(0.0)
    , vd_var(0.0)
    , is_static(false)
    , is_visible(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _s_start_type;
  _s_start_type s_start;

   typedef double _s_end_type;
  _s_end_type s_end;

   typedef double _d_right_type;
  _d_right_type d_right;

   typedef double _d_left_type;
  _d_left_type d_left;

   typedef uint8_t _is_actually_a_gap_type;
  _is_actually_a_gap_type is_actually_a_gap;

   typedef double _s_center_type;
  _s_center_type s_center;

   typedef double _d_center_type;
  _d_center_type d_center;

   typedef double _size_type;
  _size_type size;

   typedef double _vs_type;
  _vs_type vs;

   typedef double _vd_type;
  _vd_type vd;

   typedef double _s_var_type;
  _s_var_type s_var;

   typedef double _d_var_type;
  _d_var_type d_var;

   typedef double _vs_var_type;
  _vs_var_type vs_var;

   typedef double _vd_var_type;
  _vd_var_type vd_var;

   typedef uint8_t _is_static_type;
  _is_static_type is_static;

   typedef uint8_t _is_visible_type;
  _is_visible_type is_visible;





  typedef boost::shared_ptr< ::f110_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f110_msgs::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::f110_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::f110_msgs::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::f110_msgs::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f110_msgs::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f110_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f110_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::f110_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.s_start == rhs.s_start &&
    lhs.s_end == rhs.s_end &&
    lhs.d_right == rhs.d_right &&
    lhs.d_left == rhs.d_left &&
    lhs.is_actually_a_gap == rhs.is_actually_a_gap &&
    lhs.s_center == rhs.s_center &&
    lhs.d_center == rhs.d_center &&
    lhs.size == rhs.size &&
    lhs.vs == rhs.vs &&
    lhs.vd == rhs.vd &&
    lhs.s_var == rhs.s_var &&
    lhs.d_var == rhs.d_var &&
    lhs.vs_var == rhs.vs_var &&
    lhs.vd_var == rhs.vd_var &&
    lhs.is_static == rhs.is_static &&
    lhs.is_visible == rhs.is_visible;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f110_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::f110_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f110_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f110_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "778e7375210689bb1da0fcff69e149b8";
  }

  static const char* value(const ::f110_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x778e7375210689bbULL;
  static const uint64_t static_value2 = 0x1da0fcff69e149b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::f110_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f110_msgs/Obstacle";
  }

  static const char* value(const ::f110_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f110_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"\n"
"float64 s_start\n"
"float64 s_end\n"
"float64 d_right           # defined as right bound of the obstacle\n"
"float64 d_left            # defined as left bound of the obstacle\n"
"bool is_actually_a_gap    # used by the frenet planner to choos points through which we want to go\n"
"float64 s_center\n"
"float64 d_center\n"
"float64 size\n"
"float64 vs\n"
"float64 vd\n"
"float64 s_var\n"
"float64 d_var\n"
"float64 vs_var\n"
"float64 vd_var\n"
"bool is_static\n"
"bool is_visible\n"
;
  }

  static const char* value(const ::f110_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f110_msgs::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.s_start);
      stream.next(m.s_end);
      stream.next(m.d_right);
      stream.next(m.d_left);
      stream.next(m.is_actually_a_gap);
      stream.next(m.s_center);
      stream.next(m.d_center);
      stream.next(m.size);
      stream.next(m.vs);
      stream.next(m.vd);
      stream.next(m.s_var);
      stream.next(m.d_var);
      stream.next(m.vs_var);
      stream.next(m.vd_var);
      stream.next(m.is_static);
      stream.next(m.is_visible);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f110_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f110_msgs::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "s_start: ";
    Printer<double>::stream(s, indent + "  ", v.s_start);
    s << indent << "s_end: ";
    Printer<double>::stream(s, indent + "  ", v.s_end);
    s << indent << "d_right: ";
    Printer<double>::stream(s, indent + "  ", v.d_right);
    s << indent << "d_left: ";
    Printer<double>::stream(s, indent + "  ", v.d_left);
    s << indent << "is_actually_a_gap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_actually_a_gap);
    s << indent << "s_center: ";
    Printer<double>::stream(s, indent + "  ", v.s_center);
    s << indent << "d_center: ";
    Printer<double>::stream(s, indent + "  ", v.d_center);
    s << indent << "size: ";
    Printer<double>::stream(s, indent + "  ", v.size);
    s << indent << "vs: ";
    Printer<double>::stream(s, indent + "  ", v.vs);
    s << indent << "vd: ";
    Printer<double>::stream(s, indent + "  ", v.vd);
    s << indent << "s_var: ";
    Printer<double>::stream(s, indent + "  ", v.s_var);
    s << indent << "d_var: ";
    Printer<double>::stream(s, indent + "  ", v.d_var);
    s << indent << "vs_var: ";
    Printer<double>::stream(s, indent + "  ", v.vs_var);
    s << indent << "vd_var: ";
    Printer<double>::stream(s, indent + "  ", v.vd_var);
    s << indent << "is_static: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_static);
    s << indent << "is_visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_visible);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F110_MSGS_MESSAGE_OBSTACLE_H
