// Generated by gencpp from file f110_msgs/FrenetState.msg
// DO NOT EDIT!


#ifndef F110_MSGS_MESSAGE_FRENETSTATE_H
#define F110_MSGS_MESSAGE_FRENETSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace f110_msgs
{
template <class ContainerAllocator>
struct FrenetState_
{
  typedef FrenetState_<ContainerAllocator> Type;

  FrenetState_()
    : s(0.0)
    , d(0.0)
    , v(0.0)  {
    }
  FrenetState_(const ContainerAllocator& _alloc)
    : s(0.0)
    , d(0.0)
    , v(0.0)  {
  (void)_alloc;
    }



   typedef double _s_type;
  _s_type s;

   typedef double _d_type;
  _d_type d;

   typedef double _v_type;
  _v_type v;





  typedef boost::shared_ptr< ::f110_msgs::FrenetState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f110_msgs::FrenetState_<ContainerAllocator> const> ConstPtr;

}; // struct FrenetState_

typedef ::f110_msgs::FrenetState_<std::allocator<void> > FrenetState;

typedef boost::shared_ptr< ::f110_msgs::FrenetState > FrenetStatePtr;
typedef boost::shared_ptr< ::f110_msgs::FrenetState const> FrenetStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f110_msgs::FrenetState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f110_msgs::FrenetState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f110_msgs::FrenetState_<ContainerAllocator1> & lhs, const ::f110_msgs::FrenetState_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.d == rhs.d &&
    lhs.v == rhs.v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f110_msgs::FrenetState_<ContainerAllocator1> & lhs, const ::f110_msgs::FrenetState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f110_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::FrenetState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::FrenetState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::FrenetState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::FrenetState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::FrenetState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::FrenetState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f110_msgs::FrenetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f35f65d8c6f765f27afccad48d013c7";
  }

  static const char* value(const ::f110_msgs::FrenetState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f35f65d8c6f765fULL;
  static const uint64_t static_value2 = 0x27afccad48d013c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::f110_msgs::FrenetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f110_msgs/FrenetState";
  }

  static const char* value(const ::f110_msgs::FrenetState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f110_msgs::FrenetState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 s       # The longitudinal position along the Frenet path\n"
"float64 d       # The lateral distance from the Frenet path\n"
"float64 v       # The longitudinal velocity (m/s)\n"
"\n"
;
  }

  static const char* value(const ::f110_msgs::FrenetState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f110_msgs::FrenetState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.d);
      stream.next(m.v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrenetState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f110_msgs::FrenetState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f110_msgs::FrenetState_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F110_MSGS_MESSAGE_FRENETSTATE_H
