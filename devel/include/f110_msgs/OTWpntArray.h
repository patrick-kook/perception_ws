// Generated by gencpp from file f110_msgs/OTWpntArray.msg
// DO NOT EDIT!


#ifndef F110_MSGS_MESSAGE_OTWPNTARRAY_H
#define F110_MSGS_MESSAGE_OTWPNTARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <f110_msgs/Wpnt.h>

namespace f110_msgs
{
template <class ContainerAllocator>
struct OTWpntArray_
{
  typedef OTWpntArray_<ContainerAllocator> Type;

  OTWpntArray_()
    : header()
    , last_switch_time()
    , side_switch(false)
    , ot_side()
    , ot_line()
    , wpnts()  {
    }
  OTWpntArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , last_switch_time()
    , side_switch(false)
    , ot_side(_alloc)
    , ot_line(_alloc)
    , wpnts(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _last_switch_time_type;
  _last_switch_time_type last_switch_time;

   typedef uint8_t _side_switch_type;
  _side_switch_type side_switch;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ot_side_type;
  _ot_side_type ot_side;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ot_line_type;
  _ot_line_type ot_line;

   typedef std::vector< ::f110_msgs::Wpnt_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::f110_msgs::Wpnt_<ContainerAllocator> >> _wpnts_type;
  _wpnts_type wpnts;





  typedef boost::shared_ptr< ::f110_msgs::OTWpntArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f110_msgs::OTWpntArray_<ContainerAllocator> const> ConstPtr;

}; // struct OTWpntArray_

typedef ::f110_msgs::OTWpntArray_<std::allocator<void> > OTWpntArray;

typedef boost::shared_ptr< ::f110_msgs::OTWpntArray > OTWpntArrayPtr;
typedef boost::shared_ptr< ::f110_msgs::OTWpntArray const> OTWpntArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f110_msgs::OTWpntArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f110_msgs::OTWpntArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f110_msgs::OTWpntArray_<ContainerAllocator1> & lhs, const ::f110_msgs::OTWpntArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.last_switch_time == rhs.last_switch_time &&
    lhs.side_switch == rhs.side_switch &&
    lhs.ot_side == rhs.ot_side &&
    lhs.ot_line == rhs.ot_line &&
    lhs.wpnts == rhs.wpnts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f110_msgs::OTWpntArray_<ContainerAllocator1> & lhs, const ::f110_msgs::OTWpntArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f110_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f110_msgs::OTWpntArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f110_msgs::OTWpntArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f110_msgs::OTWpntArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca31dbec903934bb444714f693d1ec7f";
  }

  static const char* value(const ::f110_msgs::OTWpntArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca31dbec903934bbULL;
  static const uint64_t static_value2 = 0x444714f693d1ec7fULL;
};

template<class ContainerAllocator>
struct DataType< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f110_msgs/OTWpntArray";
  }

  static const char* value(const ::f110_msgs::OTWpntArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"time last_switch_time\n"
"bool side_switch\n"
"string ot_side\n"
"string ot_line\n"
"Wpnt[] wpnts\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: f110_msgs/Wpnt\n"
"int32 id\n"
"\n"
"# frenet coordinates\n"
"float64 s_m\n"
"float64 d_m\n"
"\n"
"# map coordinates\n"
"float64 x_m\n"
"float64 y_m\n"
"\n"
"# track bound distance\n"
"float64 d_right\n"
"float64 d_left\n"
"\n"
"# track information\n"
"float64 psi_rad\n"
"float64 kappa_radpm\n"
"float64 vx_mps\n"
"float64 ax_mps2\n"
"\n"
;
  }

  static const char* value(const ::f110_msgs::OTWpntArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.last_switch_time);
      stream.next(m.side_switch);
      stream.next(m.ot_side);
      stream.next(m.ot_line);
      stream.next(m.wpnts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OTWpntArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f110_msgs::OTWpntArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f110_msgs::OTWpntArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "last_switch_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_switch_time);
    s << indent << "side_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.side_switch);
    s << indent << "ot_side: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ot_side);
    s << indent << "ot_line: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ot_line);
    s << indent << "wpnts[]" << std::endl;
    for (size_t i = 0; i < v.wpnts.size(); ++i)
    {
      s << indent << "  wpnts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::f110_msgs::Wpnt_<ContainerAllocator> >::stream(s, indent + "    ", v.wpnts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // F110_MSGS_MESSAGE_OTWPNTARRAY_H
