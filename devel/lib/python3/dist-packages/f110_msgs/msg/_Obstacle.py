# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from f110_msgs/Obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Obstacle(genpy.Message):
  _md5sum = "778e7375210689bb1da0fcff69e149b8"
  _type = "f110_msgs/Obstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id

float64 s_start
float64 s_end
float64 d_right           # defined as right bound of the obstacle
float64 d_left            # defined as left bound of the obstacle
bool is_actually_a_gap    # used by the frenet planner to choos points through which we want to go
float64 s_center
float64 d_center
float64 size
float64 vs
float64 vd
float64 s_var
float64 d_var
float64 vs_var
float64 vd_var
bool is_static
bool is_visible"""
  __slots__ = ['id','s_start','s_end','d_right','d_left','is_actually_a_gap','s_center','d_center','size','vs','vd','s_var','d_var','vs_var','vd_var','is_static','is_visible']
  _slot_types = ['int32','float64','float64','float64','float64','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,s_start,s_end,d_right,d_left,is_actually_a_gap,s_center,d_center,size,vs,vd,s_var,d_var,vs_var,vd_var,is_static,is_visible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.s_start is None:
        self.s_start = 0.
      if self.s_end is None:
        self.s_end = 0.
      if self.d_right is None:
        self.d_right = 0.
      if self.d_left is None:
        self.d_left = 0.
      if self.is_actually_a_gap is None:
        self.is_actually_a_gap = False
      if self.s_center is None:
        self.s_center = 0.
      if self.d_center is None:
        self.d_center = 0.
      if self.size is None:
        self.size = 0.
      if self.vs is None:
        self.vs = 0.
      if self.vd is None:
        self.vd = 0.
      if self.s_var is None:
        self.s_var = 0.
      if self.d_var is None:
        self.d_var = 0.
      if self.vs_var is None:
        self.vs_var = 0.
      if self.vd_var is None:
        self.vd_var = 0.
      if self.is_static is None:
        self.is_static = False
      if self.is_visible is None:
        self.is_visible = False
    else:
      self.id = 0
      self.s_start = 0.
      self.s_end = 0.
      self.d_right = 0.
      self.d_left = 0.
      self.is_actually_a_gap = False
      self.s_center = 0.
      self.d_center = 0.
      self.size = 0.
      self.vs = 0.
      self.vd = 0.
      self.s_var = 0.
      self.d_var = 0.
      self.vs_var = 0.
      self.vd_var = 0.
      self.is_static = False
      self.is_visible = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i4dB9d2B().pack(_x.id, _x.s_start, _x.s_end, _x.d_right, _x.d_left, _x.is_actually_a_gap, _x.s_center, _x.d_center, _x.size, _x.vs, _x.vd, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var, _x.is_static, _x.is_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 111
      (_x.id, _x.s_start, _x.s_end, _x.d_right, _x.d_left, _x.is_actually_a_gap, _x.s_center, _x.d_center, _x.size, _x.vs, _x.vd, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var, _x.is_static, _x.is_visible,) = _get_struct_i4dB9d2B().unpack(str[start:end])
      self.is_actually_a_gap = bool(self.is_actually_a_gap)
      self.is_static = bool(self.is_static)
      self.is_visible = bool(self.is_visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i4dB9d2B().pack(_x.id, _x.s_start, _x.s_end, _x.d_right, _x.d_left, _x.is_actually_a_gap, _x.s_center, _x.d_center, _x.size, _x.vs, _x.vd, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var, _x.is_static, _x.is_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 111
      (_x.id, _x.s_start, _x.s_end, _x.d_right, _x.d_left, _x.is_actually_a_gap, _x.s_center, _x.d_center, _x.size, _x.vs, _x.vd, _x.s_var, _x.d_var, _x.vs_var, _x.vd_var, _x.is_static, _x.is_visible,) = _get_struct_i4dB9d2B().unpack(str[start:end])
      self.is_actually_a_gap = bool(self.is_actually_a_gap)
      self.is_static = bool(self.is_static)
      self.is_visible = bool(self.is_visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i4dB9d2B = None
def _get_struct_i4dB9d2B():
    global _struct_i4dB9d2B
    if _struct_i4dB9d2B is None:
        _struct_i4dB9d2B = struct.Struct("<i4dB9d2B")
    return _struct_i4dB9d2B
